% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/smooth-ksmooth.r
\name{smooth_ksmooth}
\alias{smooth_ksmooth}
\title{Kernel smooth}
\usage{
smooth_ksmooth(x, wrap = FALSE, n = 10L, max_distance, bandwidth)
}
\arguments{
\item{x}{numeric matrix; 2-column matrix of coordinates.}

\item{wrap}{logical; whether the coordinates should be wrapped at the ends,
as for polygons and closed lines, to ensure a smooth edge.}

\item{n}{integer; number of times to split each line segment for
\code{\link[=smooth_densify]{smooth_densify()}}. Ignored if \code{max_distance} is specified.}

\item{max_distance}{numeric; the maximum distance between vertices for
\code{\link[=smooth_densify]{smooth_densify()}}. This is the Euclidean distance and not the great circle
distance.}

\item{bandwidth}{numeric; the bandwidth of the Gaussian kernel. Larger
bandwidths will result in more smoothing. If no value is supplied, the
bandwidth is estimated from the data.}
}
\value{
A matrix with the coordinates of the smoothed curve.
}
\description{
Kernel smoothing uses \code{\link[stats:ksmooth]{stats::ksmooth()}} to smooth out existing vertices
using Gaussian kernel regression. Kernel smoothing is applied to the \code{x} and
\code{y} coordinates are independently. Prior to smoothing, \code{\link[=smooth_densify]{smooth_densify()}} is
called to generate additional vertices, and the smoothing is applied to this
densified set of vertices.
}
\details{
This function works on matrices of points and is generally not called
directly. Instead, use \code{\link[=smooth]{smooth()}} with \code{method = "ksmooth"} to apply this
smoothing algorithm to spatial features.
}
\examples{
# smooth_ksmooth works on matrices of coordinates
# use the matrix of coordinates defining a polygon as an example
m <- jagged_polygons$geometry[[2]][[1]]
m_smooth <- smooth_ksmooth(m, wrap = TRUE)
class(m)
class(m_smooth)
plot(m, type = "l", col = "black", lwd = 3, axes = FALSE, xlab = NA,
     ylab = NA)
lines(m_smooth, lwd = 3, col = "red")

# lines can also be smoothed
l <- jagged_lines$geometry[[2]][]
l_smooth <- smooth_ksmooth(l, wrap = FALSE, max_distance = 0.05, bandwidth = 10)
plot(l, type = "l", col = "black", lwd = 3, axes = FALSE, xlab = NA,
     ylab = NA)
lines(l_smooth, lwd = 3, col = "red")

# smooth is a wrapper for smooth_ksmooth that works on spatial features
library(sf)
p <- jagged_polygons$geometry[[2]]
p_smooth <- smooth(p, method = "ksmooth")
class(p)
class(p_smooth)
plot(p_smooth, border = "red")
plot(p, add = TRUE)
}
\references{
The kernel smoothing method was inspired by the following
StackExchange answers:
\itemize{
\item \href{https://stats.stackexchange.com/a/143608/44268}{Nadaraya-Watson Optimal Bandwidth}
\item \href{https://gis.stackexchange.com/a/24929/26661}{Smoothing polygons in contour map?}
}
}
\seealso{
\code{\link[=smooth]{smooth()}}
}
