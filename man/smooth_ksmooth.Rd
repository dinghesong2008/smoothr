% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/smooth_ksmooth.r
\name{smooth_ksmooth}
\alias{smooth_ksmooth}
\title{Kernel smoothing}
\usage{
smooth_ksmooth(x, wrap = TRUE, bandwidth, n = 100, vertex_factor, k = 3)
}
\arguments{
\item{x}{numeric matrix; 2-column matrix of coordinates.}

\item{wrap}{logical; whether the coordinates should be wrapped at the ends,
as for polygons and closed lines.}

\item{bandwidth}{double; the kernel bandwidth, larger values lead to more
smoothing. Leaving \code{bandwidth} blank will estimate a reasonable bandwith
from the data. Typically it's best to start with this default value, then
refine as necessary to get the desired amount of smoothing.}

\item{n}{integer; number of vertices in the smoothed curve. Ignored if
\code{vertex_factor} is specified.}

\item{vertex_factor}{double; the proportional increase in the number of
vertices in the smooth curve. For example, if the oringal curve has 10
points, a value of \code{2.5} will yield a new smoothed curve with 250 points.}

\item{k}{integer; number of vertices to wrap around at each end to ensure
that the boundary of a polygon is correctly smoothed at the endpoints.}
}
\value{
A matrix with the coordiantes of the smoothed curve.
}
\description{
Kernel smoothing uses \code{\link[stats:ksmooth]{stats::ksmooth()}} to estimate a curve as a weighted
average of the existing vertices, where the weights are defined by an
Guassian kernel. The \code{x} and \code{y} coordinates are smoothed independently.
}
\details{
This function works on matrices of points and is generally not called
directly. Instead, use \code{\link[=smooth]{smooth()}} with \code{method = "ksmooth"} to apply this
smoothing algorithm to spatial features.
}
\examples{
# smooth_ksmooth() works on matrices of coordinates
# use the matrix of coordinates defining a polygon as an example
m <- jagged_polygons$geometry[[1]][[1]]
m_smooth <- smooth_ksmooth(m)
class(m)
class(m_smooth)
plot(m, type = "l", col = "black", axes = FALSE, xlab = NA, ylab = NA)
lines(m_smooth, col = "red")
points(m_smooth)

# smooth() is a wrapper for smooth_ksmooth that works on spatial features
library(sf)
p <- jagged_polygons$geometry[[2]]
p_smooth <- smooth(p, method = "ksmooth")
class(p)
class(p_smooth)
plot(p_smooth, border = "red")
plot(p, add = TRUE)
}
\references{
The formula for estimating a default bandwith is taken from the
following StackExchange answer:
\itemize{
\item \href{https://stats.stackexchange.com/a/143608/44268}{Nadaraya-Watson Optimal Bandwidth}
}
}
\seealso{
\code{\link[=smooth]{smooth()}}
}
